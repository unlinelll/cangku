首先你需要在 GitHub 上创建一个新的代码仓库（repository）。然后你可以通过以下步骤将本地项目代码上传到 GitHub：

1. 打开 VS Code 并切换到你的项目所在的文件夹。

2. 打开命令面板，在 Windows 和 Linux 上，按下 `Ctrl + Shift + P`，在 macOS 上，按下 `Command + Shift + P`。

3. 在命令面板中输入 "Git Initialize"，并选择 "Git: Initialize Repository"。

4. 在弹出的提示框中选择你要将本地 Git 仓库初始化的位置，并点击 "Initialize Git Repository"。

5. 在终端中使用 `git status` 命令检查当前项目的状态，确保项目的代码和变更已被 Git 跟踪。

6. 点击 VS Code 底部工具栏中的源代码管理按钮（Source Control）打开版本控制面板。

7. 在版本控制面板中，输入一个注释并提交你的修改。你也可以点击 "+" 将所有未跟踪的文件添加到 Git。

8. 点击版本控制面板中菜单的推送推送本地代码到 GitHub。

在这些步骤完成之后，你的本地项目代码将被推送到 GitHub 的代码仓库中。如果你是首次推送代码到 GitHub，可能需要填写登录信息或生成 SSH 密钥，以确保你的代码得到正确的验证和保护。


这两条命令的作用是将本地仓库主分支从旧的默认分支名 `master` 改为新的默认分支名 `main`，并将更改推送到远程仓库。

命令 `git branch -M main` 会将本地仓库的当前分支重命名为 `main`，参数 `-M` 是强制重命名的意思，
它可以让 Git 忽略当前分支与新分支名之间的差别，强制将当前分支重命名为 `main`。如果当前仓库还没有 `main` 分支，则该命令会创建一个新的 `main` 分支。

命令 `git push -u origin main` 会将本地分支 `main` 推送到远程仓库，并在远程仓库中创建一个新的分支，
也叫 `main`。参数 `-u` 表示设置 `main` 分支为本地仓库的默认推送分支，以后每次推送代码到远程仓库时，
Git 会自动推送到 `main` 分支上。参数 `origin` 表示推送到当前仓库的远程仓库，如果你的仓库有多个远程仓库，需要指定相应的远程仓库。



1. git init：初始化一个新的Git仓库
2. git clone：从远程仓库克隆一个本地副本
3. git add：将当前工作目录下的更改添加到索引（即对将要在下一次提交中包含哪些文件进行标记）
4. git commit：提交更改并将其保存在本地仓库中
5. git push：将本地仓库中的更改推送到远程仓库中
6. git pull：从远程仓库中拉取最新的更改到本地仓库中
7. git branch：查看、创建、删除、重命名、切换、合并分支等操作
8. git checkout：切换分支或还原文件到上一个commit
9. git log：查看提交历史记录
10. git status：查看当前仓库中文件的状态
11. git diff：比较工作目录中的文件和上一次提交的版本差异
12. git stash：保存当前的修改，以便稍后恢复现场
13. git merge：将两个分支合并
14. git reset：撤销提交，并将文件还原到之前的状态
15. git tag：给一个commit打上标签，便于快速查找
16. git remote：管理远程仓库
17. git fetch：从远程仓库中下载更新到本地仓库，但不会合并
18. git rebase：用于将一个分支的修改合并到另一个分支。